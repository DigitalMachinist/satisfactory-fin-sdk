#!/bin/bash

###################################################################################################
# unapply
#
# Unapply one or more drives, such that app builds will no longer update the drives' files. The
# drives' files are unaffected, so any FIN computer that boots it will still run any app code on
# the drive, it just won't be updated with newer builds of the app when the `build` command runs.
#
# When a drive is unapplied, a symlink will be made from /app_drives/unapplied/<drive_uuid> to the
# drive's real folder at /drives/<drive_uuid> so their folder contents will always match.
#
# Note: Unapplied drives are also `tag`ged as "unapplied" and can be looked up using the `findtag`
# command.
###################################################################################################

COMMAND_PATH="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
source "$COMMAND_PATH/../config"

if [ -z "$1" ]; then
    important "Missing arguments!\nUsage: $0 <drive_uuid> [<drive_uuid>]...\n";
    exit 1
fi

if [ ! -d "$APP_DRIVES_PATH" ]; then
    mkdir "$APP_DRIVES_PATH"
fi

NEW_APP="unapplied"
if [ ! -d "$APP_DRIVES_PATH/$NEW_APP" ]; then
    mkdir "$APP_DRIVES_PATH/$NEW_APP"
fi

# While changing to the /drives folder, get the path to use for Windows symlinking.
cd "$DRIVES_PATH"

for DRIVE in "${@:1}"
do
    # If this drive was not applied to an app, continue to the next one.
    DRIVE_PATH="$DRIVES_PATH/$DRIVE"
    if [ ! -f "$DRIVE_PATH/.app" ]; then
        printf "Drive ${RED}$DRIVE${NC} is not applied to an app.\n"
        continue
    fi
    OLD_APP=$( cat "$DRIVE_PATH/.app" )
    if [ "$OLD_APP" == "unapplied" ]; then
        printf "Drive ${RED}$DRIVE${NC} is not applied to an app.\n"
        continue
    fi

    # Remove the obsolete app symlink.
    rm "$APP_DRIVES_PATH/$OLD_APP/$DRIVE"
    "$COMMAND_PATH/untag" "$OLD_APP" $DRIVE >/dev/null 2>&1

    # Update the .app file to "unapplied" and tag the drive as such.
    echo "$NEW_APP" > "$DRIVE_PATH/.app"
    "$COMMAND_PATH/tag" "$NEW_APP" $DRIVE >/dev/null 2>&1

    # Symlink the drive into the /app_drives "unapplied" subfolder. This makes it so that any
    # changes to the folder under /app_drives are automatically reflected in the one under /drives.
    # Note: For clarity, /drives is the *real* copy. Folders under /app_drives symlink to those.
    if [ "$SYMLINK_FOR_WINDOWS" -eq 1 ]; then
        # Use Windows symlinking if requested.
        WIN_DRIVES_PATH=$( cmdpwd )
        cmdrun mklink /D "$WIN_DRIVES_PATH\\..\\app_drives\\$NEW_APP\\$DRIVE" "$WIN_DRIVES_PATH\\$DRIVE" >/dev/null 2>&1
    else
        # Otherwise, use *nix symlinking instead.
        ln -sf "$DRIVE_PATH" "$APP_DRIVES_PATH/$NEW_APP/$DRIVE"
    fi
    
    if [ "$OLD_APP" = "unassigned" ]; then
        printf "Drive ${RED}$DRIVE${NC} is not applied to an app.\n"
    else
        printf "Drive ${RED}$DRIVE${NC} is no longer applied to ${GREEN}$OLD_APP${NC}.\n"
    fi
done

cd $PWD

important "\nDone!\n"
