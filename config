#!/bin/bash

###################################################################################################
# config
#
# This file contains constants needed to make deploy scripts work.
#
# Make sure you configure this for your system before using these scripts!
###################################################################################################



### YOU NEED TO SET THESE YOURSELF! ###############################################################

# Path to your Satisfactory data folder in your bash environment (no trailing slash `/`)
#
# This is *not* a Windows path like "C:\Users\digitalmachinist\AppData\Local\FactoryGame"!
#
# For example:
# 1. "/c/Users/digitalmachinist/AppData/Local/FactoryGame"       <--- (OK) Git Bash / MINGW64 style
# 2. "/mnt/c/Users/digitalmachinist/AppData/Local/FactoryGame"   <--- (OK) WSL for Windows style
# 3. "C:\Users\digitalmachinist\AppData\Local\FactoryGame"       <--- (BAD!) Windows style
SATISFACTORY_DATA_PATH="YOUR_PATH_GOES_HERE"

# Is your editor running in Windows (not in your *nix environment)?
#
# I run WSL bash while my editor runs under Windows so I need to use Windows symlinks for my
# editor's sidebar to display the contents of my /app_drives folder. If your /app_drives folder
# seems empty in your editor, this might be set to the wrong value for you.
#
# If your editor is running under *nix, we can use *nix symlinks for your /app_drives by setting
# this value to 0 instead. I have not tested this thoroughly. lmk if this misbehaves.
#
# If none of that made sense, probably leave this set to 1.
SYMLINK_FOR_WINDOWS=1

###################################################################################################



# Get the path the command is being run from, so we can return to it when we're done.
PWD=$( pwd )

# Get the path to your Satisfactory FIN computers folder.
FIN_COMPUTERS_PATH="$SATISFACTORY_DATA_PATH/Saved/SaveGames/Computers"

# Get the path to the current command, so we can resolve paths relative to it.
FIN_SDK_PATH="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
APPS_PATH="$FIN_SDK_PATH/apps"
APP_DRIVES_PATH="$FIN_SDK_PATH/app_drives"
BACKUPS_PATH="$FIN_SDK_PATH/backups"
COMMANDS_PATH="$FIN_SDK_PATH/commands"
DRIVES_PATH="$FIN_SDK_PATH/drives"
LIBS_PATH="$FIN_SDK_PATH/libs"
EEPROM_PATH="$FIN_SDK_PATH/eeprom.lua"

# Colours!
NC='\033[0m'
BLACK='\033[0;30m'
RED='\033[0;31m'
GREEN='\033[0;32m'
BROWN='\033[0;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
LIGHT_GRAY='\033[0;37m'
DARK_GRAY='\033[1;30m'
LIGHT_RED='\033[1;31m'
LIGHT_GREEN='\033[1;32m'
YELLOW='\033[1;33m'
LIGHT_BLUE='\033[1;34m'
LIGHT_PURPLE='\033[1;35m'
LIGHT_CYAN='\033[1;36m'
WHITE='\033[1;37m'

# Get the pwd of the current folder but as a Windows/cmd.exe path.
cmdpwd() {
    #return `wslpath -w "$(pwd)"`
    cmd.exe /c "cd"
}

# Run a command under cmd.exe along with any included command line args.
cmdrun() {
    CMD=$1
    shift;
    ARGS=$@
    WIN_PWD=`winpwd()`
    cmd.exe /c "pushd ${WIN_PWD} && ${CMD} ${ARGS}"
}

important() {
    printf "${YELLOW}$1${NC}"
}

# Ensure that SATISFACTORY_DATA_PATH & FIN_COMPUTERS_PATH both exist.
if [ ! -d "$SATISFACTORY_DATA_PATH" ]; then
    printf "${RED}SATISFACTORY_DATA_PATH does not exist!\n${NC}"
    printf "${RED}  ╰──▶ $SATISFACTORY_DATA_PATH${NC}\n\n"
    important "Aborting...\n"
    exit 255
else
    if [ ! -d "$FIN_COMPUTERS_PATH" ]; then
        mkdir "$FIN_COMPUTERS_PATH"
    fi
fi
